// Generated by CoffeeScript 1.9.1
(function() {
  var React, TestRenderer, flattenChildren, shallowTestUtils;

  React = require('react');

  shallowTestUtils = require('react-shallow-testutils');

  flattenChildren = require('./utils').flattenChildren;

  TestRenderer = (function() {
    function TestRenderer(shallowRenderer, Component, context) {
      this._shallowRenderer = shallowRenderer;
      this._Component = Component;
      this._context = context;
      this._lastProps = {};
    }

    TestRenderer.prototype.setContext = function(contextUpdate) {
      var contextKey, nextContext, ref, value;
      if (contextUpdate == null) {
        contextUpdate = {};
      }
      nextContext = {};
      ref = this._context;
      for (contextKey in ref) {
        value = ref[contextKey];
        nextContext[contextKey] = value;
      }
      for (contextKey in contextUpdate) {
        value = contextUpdate[contextKey];
        nextContext[contextKey] = value;
      }
      this._context = nextContext;
      return this.render(this._lastProps);
    };

    TestRenderer.prototype.render = function(props, hooks) {
      var element;
      if (props == null) {
        props = {};
      }
      if (hooks == null) {
        hooks = {};
      }
      this._lastProps = props;
      this._hookComponent(hooks);
      element = React.createElement(this._Component, props);
      this._shallowRenderer.render(element, this._context);
      return this.getRendering();
    };

    TestRenderer.prototype._hookComponent = function(hooks) {
      var Component, componentDidMount;
      Component = this._Component;
      if (Component.prototype) {
        if (hooks.onBeforeDidMount) {
          componentDidMount = Component.prototype.componentDidMount;
          return Component.prototype.componentDidMount = function() {
            hooks.onBeforeDidMount.call(null);
            if (componentDidMount != null) {
              componentDidMount.call(this);
            }
            return Component.prototype.componentDidMount = componentDidMount;
          };
        }
      }
    };

    TestRenderer.prototype.getRendering = function() {
      return this._shallowRenderer.getRenderOutput();
    };

    TestRenderer.prototype.getComponent = function() {
      var ref;
      if (!this._shallowRenderer.getMountedInstance) {
        return ((ref = this._shallowRenderer._instance) != null ? ref._instance : void 0) || null;
      }
      return this._shallowRenderer.getMountedInstance();
    };

    TestRenderer.prototype.getChildContext = function() {
      var component;
      component = this.getComponent();
      return component.getChildContext();
    };

    TestRenderer.prototype.getChildren = function(parent) {
      if (parent == null) {
        parent = this.getRendering();
      }
      return flattenChildren(parent.props.children);
    };

    TestRenderer.prototype.getChildOfType = function(type, parent) {
      var error;
      if (parent == null) {
        parent = this.getRendering();
      }
      try {
        return shallowTestUtils.findWithType(parent, type);
      } catch (_error) {
        error = _error;
        return null;
      }
    };

    TestRenderer.prototype.getChildrenOfType = function(type, parent) {
      if (parent == null) {
        parent = this.getRendering();
      }
      return shallowTestUtils.findAllWithType(parent, type);
    };

    TestRenderer.prototype.getChildOfClass = function(className, parent) {
      var error;
      if (parent == null) {
        parent = this.getRendering();
      }
      try {
        return shallowTestUtils.findWithClass(parent, className);
      } catch (_error) {
        error = _error;
        return null;
      }
    };

    TestRenderer.prototype.getChildrenOfClass = function(className, parent) {
      if (parent == null) {
        parent = this.getRendering();
      }
      return shallowTestUtils.findAllWithClass(parent, className);
    };

    TestRenderer.prototype.getTextContent = function(parent) {
      var children, textContent;
      if (parent == null) {
        parent = this.getRendering();
      }
      children = this.getChildren(parent);
      textContent = '';
      children.forEach((function(_this) {
        return function(child) {
          if (typeof child === 'string') {
            return textContent += child;
          } else {
            return textContent += _this.getTextContent(child);
          }
        };
      })(this));
      return textContent;
    };

    return TestRenderer;

  })();

  module.exports = TestRenderer;

}).call(this);
